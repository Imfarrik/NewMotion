import android.os.Handler
import android.os.Looper
import com.google.gson.Gson
import okhttp3.*
import okhttp3.RequestBody.Companion.toRequestBody
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.GET
import java.io.IOException
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import java.net.URL
import java.util.concurrent.TimeUnit
import javax.net.ssl.HttpsURLConnection

fun main() {
    okhttp()
}

private fun httpUrlConnect() {
    Thread {
        val httpsURLConnection =
            URL("https://monitoring.asakabank.uz/api/mobile/deprecated-mobile-versions").openConnection() as HttpsURLConnection
        httpsURLConnection.apply {
            setRequestProperty("Authorization", "Basic YXBpOkE2YTY4c2ZhNjF2cjZhODdy")
            setRequestProperty("Content-Type", "application/json")
            connectTimeout = 60000
            requestMethod = "POST"
            doOutput = true
            println(httpsURLConnection.requestProperties.toString())
            val outputStream = outputStream
            val outputStreamWriter = OutputStreamWriter(outputStream, "UTF-8")
            outputStreamWriter.write("{\"appVersion\":22100717,\"type\":\"ANDROID\"}")
            outputStreamWriter.flush()
            outputStreamWriter.close()
            outputStream.close()
        }

        var responseObject = ResponseObject("", "", ResponseData(false))
        if (httpsURLConnection.responseCode == HttpsURLConnection.HTTP_OK) {
            println("http ok")
            val inputStream = httpsURLConnection.inputStream
            val inputStreamReader = InputStreamReader(inputStream, "UTF-8")
            val jsonBody = inputStreamReader.readText()
            println(jsonBody)

            responseObject = Gson().fromJson(jsonBody, ResponseObject::class.java)
            println(responseObject.message)
            println(responseObject.data.forceUpgrade)
        } else {
            println("http ${httpsURLConnection.responseCode}")
        }
        httpsURLConnection.disconnect()
        println("finish")
//            Handler(Looper.getMainLooper()).post {
        println(responseObject.message)
//            }
    }.start()
}

private fun okhttp() {
    val body = "{\"appVersion\":22100717,\"type\":\"ANDROID\"}".toRequestBody()
    val request = Request.Builder()
        .post(body)
        .url("https://monitoring.asakabank.uz/api/mobile/deprecated-mobile-versions")
        .addHeader("Authorization", "Basic YXBpOkE2YTY4c2ZhNjF2cjZhODdy")
        .addHeader("Content-Type", "application/json")
        .build()
    val client = OkHttpClient.Builder()
        .addInterceptor(HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY))
        .connectTimeout(100, TimeUnit.MILLISECONDS)
        .build()
    client.newCall(request).enqueue(object : Callback {
        override fun onFailure(call: Call, e: IOException) {
        }

        override fun onResponse(call: Call, response: Response) {
            if (response.code == 200) {
                val str = response.body!!.string()
                val responseObject = Gson().fromJson(str, ResponseObject::class.java)
                Handler(Looper.getMainLooper()).post {
                    println(responseObject.message)
                }
            }
        }
    })
}

private fun retrofit() {
    val client = OkHttpClient.Builder()
        .addInterceptor(AuthInterceptor())
        .addInterceptor(HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY))
        .connectTimeout(100, TimeUnit.MILLISECONDS)
        .build()
    val retrofit = Retrofit.Builder()
        .baseUrl("https://monitoring.asakabank.uz/")
        .addConverterFactory(GsonConverterFactory.create())
        .client(client)
        .build()

    val api = retrofit.create(ServerApi::class.java)

    val call = api.checkUpgrade(UpgradeRequest(22100717, "ANDROID"))


    call.enqueue(object : retrofit2.Callback<ResponseObject> {
        override fun onResponse(
            call: retrofit2.Call<ResponseObject>,
            response: retrofit2.Response<ResponseObject>
        ) {
            if (response.code() == 200) {
                val res = response.body()
                Handler(Looper.getMainLooper()).post {
                    println(res?.message ?: "res is null")
                }
            }
        }

        override fun onFailure(call: retrofit2.Call<ResponseObject>, t: Throwable) {
        }

    })
    println("finish")
}

data class ResponseObject(
    val status: String,
    val message: String,
    val data: ResponseData

    val cardList: List<Card>
)

data class Card(
    val id: Long
)

data class ResponseData(
    val forceUpgrade: Boolean
)

data class UpgradeRequest(
    val appVersion: Int,
    val type: String
)

interface ServerApi {

    @GET("api/mobile/deprecated-mobile-versions")
    fun checkUpgrade(userId: Long): retrofit2.Call<ResponseObject>
}

